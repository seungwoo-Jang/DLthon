# -*- coding: utf-8 -*-
"""U_Net.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EAohbosmxBA7QcC87dkYafuZVR4raBh6
"""

import tensorflow as tf
from keras.layers import Conv2D, Conv2DTranspose, MaxPooling2D, concatenate
from keras.models import Model

from ConvBlock2D import conv_block_2D

def create_unet(img_height, img_width, input_chanels, out_classes, starting_filters):
    input_layer = tf.keras.layers.Input((img_height, img_width, input_chanels))

    print('U-Net 가동')

    x0_0 = conv_block_2D(input_layer, starting_filters, 'double_convolution')
    px0_0 = MaxPooling2D(pool_size=2)(x0_0)

    x1_0 = conv_block_2D(px0_0, starting_filters * 2, 'double_convolution')
    px1_0 = MaxPooling2D(pool_size=2)(x1_0)

    x2_0 = conv_block_2D(px1_0, starting_filters * 4, 'double_convolution')
    px2_0 = MaxPooling2D(pool_size=2)(x2_0)

    x3_0 = conv_block_2D(px2_0, starting_filters * 8, 'double_convolution')
    px3_0 = MaxPooling2D(pool_size=2)(x3_0)

    x4_0 = conv_block_2D(px3_0, starting_filters * 16, 'double_convolution')

    ux4_0 = Conv2DTranspose(starting_filters * 8, 2, strides=2, padding='same')(x4_0)

    cx3_1 = concatenate([ux4_0, x3_0], axis=-1)
    x3_1 = conv_block_2D(cx3_1, starting_filters * 8, 'double_convolution')
    ux3_1 = Conv2DTranspose(starting_filters * 4, 2, strides=2, padding='same')(x3_1)

    cx2_1 = concatenate([ux3_1, x2_0], axis=-1)
    x2_1 = conv_block_2D(cx2_1, starting_filters * 4, 'double_convolution')
    ux2_1 = Conv2DTranspose(starting_filters * 2, 2, strides=2, padding='same')(x2_1)

    cx1_1 = concatenate([ux2_1, x1_0], axis=-1)
    x1_1 = conv_block_2D(cx1_1, starting_filters * 2, 'double_convolution')
    ux1_1 = Conv2DTranspose(starting_filters, 2, strides=2, padding='same')(x1_1)

    cx0_1 = concatenate([ux1_1, x0_0], axis=-1)
    x0_1 = conv_block_2D(cx0_1, starting_filters , 'double_convolution')

    output = Conv2D(out_classes, 1, activation='sigmoid')(x0_1)

    model = Model(inputs=input_layer, outputs=output)
    return model